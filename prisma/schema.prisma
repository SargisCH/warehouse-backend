generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  password    String
  companyName String?
  tenant      Tenant  @relation(fields: [tenantId], references: [id])
  tenantId    Int
}

model Tenant {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model Inventory {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @unique
  amount                     Float
  amountUnit                 String
  price                      Float                        @default(0)
  currency                   String                       @default("AMD")
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @updatedAt
  //Ingredient Ingredient?
  Ingredient                 Ingredient[]
  InventorySupplierOrderItem InventorySupplierOrderItem[]
}

model Customer {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  TradeCredit TradeCredit?
}

model TradeCredit {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @unique
  amount     Float
  currency   String?  @default("AMD")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  ingredients Ingredient[]
  price       Float
  priceUnit   String
  inStock     Float
  inStockUnit String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model Ingredient {
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId Int
  amount      Float
  amountUnit  String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@id([productId, inventoryId])
}

model InventorySupplier {
  id         Int                      @id @default(autoincrement())
  name       String                   @unique
  created_at DateTime                 @default(now())
  updated_at DateTime                 @updatedAt
  orders     InventorySupplierOrder[]
  deleted    Boolean                  @default(false)
}

model InventorySupplierOrder {
  id                  Int                          @id @default(autoincrement())
  inventorySupplier   InventorySupplier            @relation(fields: [inventorySupplierId], references: [id])
  inventorySupplierId Int
  orderDate           DateTime                     @default(now())
  status              String?                      @default("")
  created_at          DateTime                     @default(now())
  updated_at          DateTime                     @updatedAt
  orderItems          InventorySupplierOrderItem[]
}

model InventorySupplierOrderItem {
  id                       Int                    @id @default(autoincrement())
  inventorySupplierOrder   InventorySupplierOrder @relation(fields: [inventorySupplierOrderId], references: [id])
  inventorySupplierOrderId Int
  inventory                Inventory              @relation(fields: [inventoryId], references: [id])
  inventoryId              Int
  price                    Float
  priceUnit                String
  amount                   Float
  amountUnit               String
  created_at               DateTime               @default(now())
  updated_at               DateTime               @updatedAt
}
